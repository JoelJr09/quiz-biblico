const apiUrl = "https://quiz-biblico-api-joel.onrender.com";

// O array 'questions' fixo foi REMOVIDO
// As perguntas agora v√™m do backend

let shuffledQuestions = []; // Isso agora vai ser preenchido pela API
let currentQuestionIndex = 0;
let score = 0;

// Pega os dados do usu√°rio do localStorage
let username = localStorage.getItem("username");
let userId = localStorage.getItem("userId");
let currentLevel = localStorage.getItem("userLevel"); // N√≠vel do usu√°rio

// Pega os elementos do HTML
const questionEl = document.getElementById("question");
const answersEl = document.getElementById("answers");
const nextBtn = document.getElementById("next-btn");
const resultEl = document.getElementById("result");
const welcomeEl = document.getElementById("welcome");
const questionContainerEl = document.getElementById("question-container");

// Inicia o quiz quando o DOM estiver carregado
document.addEventListener("DOMContentLoaded", startQuiz);

/**
 * Inicia o quiz: busca perguntas do n√≠vel atual, reseta o estado.
 */
async function startQuiz() {
  // 1. Verifica se o usu√°rio est√° logado
  if (!userId) {
    alert("Fa√ßa login primeiro!");
    window.location.href = "index.html"; // Redireciona para o login (index.html)
    return;
  }

  // 2. Controla a visibilidade dos elementos
  resultEl.classList.add("hidden"); // Esconde o resultado anterior
  welcomeEl.classList.remove("hidden"); // Mostra a boas-vindas
  questionContainerEl.classList.remove("hidden"); // Mostra o container das perguntas

  // 3. Reseta o estado do quiz
  // Pega s√≥ a parte antes do @
  const simpleUsername = username.split('@')[0];
  welcomeEl.innerText = `Bem-vindo(a), ${simpleUsername}! (N√≠vel ${currentLevel})`; // Mostra o n√≠vel
  currentQuestionIndex = 0;
  score = 0;

  // 4. Busca as perguntas do backend (API)
  try {
    const response = await fetch(`${apiUrl}/questions/${currentLevel}`);
    if (!response.ok) throw new Error("Falha ao buscar perguntas");

    shuffledQuestions = await response.json();

    // Se n√£o houver perguntas (acabou o jogo ou erro)
    if (shuffledQuestions.length === 0) {
      showGameWin(); // Mostra a tela de "zerou o jogo"
      return;
    }
  } catch (err) {
    console.error("Erro ao carregar perguntas:", err);
    questionEl.innerText =
      "N√£o foi poss√≠vel carregar as perguntas. Tente recarregar a p√°gina.";
    return;
  }

  // 5. Configura o bot√£o "Pr√≥xima"
  nextBtn.innerText = "Pr√≥xima";
  nextBtn.onclick = handleNextQuestion; // Define a a√ß√£o do bot√£o

  // 6. Mostra a primeira pergunta
  showQuestion();
}

/**
 * Mostra a pergunta atual e as op√ß√µes de resposta.
 */
function showQuestion() {
  resetState(); // Limpa o estado anterior (bot√µes, etc.)

  const currentQuestion = shuffledQuestions[currentQuestionIndex];
  questionEl.innerText = currentQuestion.question;

  currentQuestion.answers.forEach((answer, index) => {
    const button = document.createElement("button");
    button.innerText = answer;
    button.classList.add("answer-btn");
    button.addEventListener("click", () => selectAnswer(index));
    answersEl.appendChild(button);
  });
}

/**
 * Reseta a interface (esconde bot√£o "Pr√≥xima" e limpa respostas).
 */
function resetState() {
  nextBtn.classList.add("hidden"); // O bot√£o "Pr√≥xima" fica escondido
  answersEl.innerHTML = ""; // Limpa as respostas da pergunta anterior
}

/**
 * Chamada quando o usu√°rio clica em uma resposta.
 * Valida a resposta, atualiza a pontua√ß√£o e mostra o feedback visual.
 */
function selectAnswer(index) {
  const correct = shuffledQuestions[currentQuestionIndex].correct;
  const buttons = document.querySelectorAll(".answer-btn");

  // Aumenta a pontua√ß√£o se a resposta estiver correta
  if (index === correct) score++;

  // Feedback visual (cores)
  buttons.forEach((btn, i) => {
    btn.disabled = true; // Desabilita todos os bot√µes
    if (i === correct) {
      btn.style.backgroundColor = "#b2f2bb"; // Verde para a correta
    } else if (i === index) {
      btn.style.backgroundColor = "#f08080"; // Vermelho para a incorreta escolhida
    }
  });

  nextBtn.classList.remove("hidden"); // Mostra o bot√£o "Pr√≥xima"
}

/**
 * Chamada quando o usu√°rio clica em "Pr√≥xima".
 * Avan√ßa para a pr√≥xima pergunta ou mostra o resultado final.
 */
function handleNextQuestion() {
  currentQuestionIndex++;
  if (currentQuestionIndex < shuffledQuestions.length) {
    showQuestion();
  } else {
    showResult();
  }
}

/**
 * Mostra o resultado final, salva a pontua√ß√£o e verifica se o usu√°rio subiu de n√≠vel.
 */
async function showResult() {
  resetState(); // Limpa a tela

  // Esconde os elementos do quiz
  welcomeEl.classList.add("hidden");
  questionContainerEl.classList.add("hidden");

  const passed = score >= 4; // Condi√ß√£o para subir de n√≠vel (4 de 5)
  let message = "";

  if (passed) {
    // --- USU√ÅRIO PASSOU DE N√çVEL ---
    message = `Perfeito! Voc√™ passou para o pr√≥ximo n√≠vel! üèÜ`;
    nextBtn.innerText = "Pr√≥ximo N√≠vel";

    try {
      // Atualiza o n√≠vel no backend
      await fetch(`${apiUrl}/update-level`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ userId }),
      });

      // Atualiza o n√≠vel no localStorage para o pr√≥ximo quiz
      currentLevel++;
      localStorage.setItem("userLevel", currentLevel);

    } catch (err) {
      console.error("Erro ao atualizar n√≠vel:", err);
      message = "Voc√™ passou, mas houve um erro ao salvar seu progresso.";
    }
  } else {
    // --- USU√ÅRIO N√ÉO PASSOU ---
    if (score >= 3) {
      message = "Muito bom! Mas voc√™ precisa de 4/5 para avan√ßar. Tente de novo! üôè";
    } else {
      message = "Voc√™ ainda pode aprender mais. Tente este n√≠vel novamente! üìñ";
    }
    nextBtn.innerText = "Tentar Novamente";
  }

  // Mostra a mensagem de resultado
  resultEl.innerHTML = `Parab√©ns, ${username}!<br>${message}<br><br>Sua pontua√ß√£o: ${score}/5`;
  resultEl.classList.remove("hidden");

  // Salva o resultado (pontua√ß√£o) da tentativa atual no backend
  try {
    await fetch(`${apiUrl}/save-result`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ userId, score }), // Salva a pontua√ß√£o
    });
  } catch (err) {
    console.error("Erro ao salvar resultado:", err);
  }

  // Mostra o bot√£o ("Pr√≥ximo N√≠vel" ou "Tentar Novamente")
  nextBtn.classList.remove("hidden");

  // O bot√£o sempre chama startQuiz, que buscar√° as perguntas do n√≠vel correto (o novo ou o atual)
  nextBtn.onclick = startQuiz;
}

/**
 * (Opcional) Mostra uma mensagem quando o usu√°rio zera o jogo.
 */
function showGameWin() {
  resetState();
  welcomeEl.classList.add("hidden");
  questionContainerEl.classList.add("hidden");
  nextBtn.classList.add("hidden"); // Esconde o bot√£o, n√£o h√° mais n√≠veis

  resultEl.innerHTML = `Parab√©ns, ${username}!<br>Voc√™ zerou o Quiz B√≠blico! üöÄ<br><br>Voc√™ √© um verdadeiro mestre da Palavra!`;
  resultEl.classList.remove("hidden");
}